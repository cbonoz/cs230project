[MethodDeclaration(name='addChild', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='child', dimensions=0), type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[MethodInvocation(name='add', arguments=[Name(value='child')], type_arguments=[], target=FieldAccess(name='children', target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='setAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='value', dimensions=0), type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), MethodInvocation(name='put', arguments=[Name(value='name'), MethodInvocation(name='toString', arguments=[], type_arguments=[], target=Name(value='value'))], type_arguments=[], target=FieldAccess(name='attributes', target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='setIntAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='value', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), MethodInvocation(name='put', arguments=[Name(value='name'), MethodInvocation(name='toString', arguments=[Name(value='value')], type_arguments=[], target=Name(value='Integer'))], type_arguments=[], target=FieldAccess(name='attributes', target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='setDoubleAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='value', dimensions=0), type='double', modifiers=[], vararg=False)], return_type='void', body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), MethodInvocation(name='put', arguments=[Name(value='name'), MethodInvocation(name='toString', arguments=[Name(value='value')], type_arguments=[], target=Name(value='Double'))], type_arguments=[], target=FieldAccess(name='attributes', target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='countChildren', modifiers=['public'], type_parameters=[], parameters=[], return_type='int', body=[Return(result=MethodInvocation(name='size', arguments=[], type_arguments=[], target=FieldAccess(name='children', target='this')))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='enumerateAttributeNames', modifiers=['public'], type_parameters=[], parameters=[], return_type=Type(name=Name(value='Iterator'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=MethodInvocation(name='iterator', arguments=[], type_arguments=[], target=MethodInvocation(name='keySet', arguments=[], type_arguments=[], target=FieldAccess(name='attributes', target='this'))))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='iterateChildren', modifiers=['public'], type_parameters=[], parameters=[], return_type=Type(name=Name(value='Iterator'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=MethodInvocation(name='iterator', arguments=[], type_arguments=[], target=FieldAccess(name='children', target='this')))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getChildren', modifiers=['public'], type_parameters=[], parameters=[], return_type=Type(name=Name(value='ArrayList'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Try(block=Block(statements=[Return(result=Cast(target=Type(name=Name(value='ArrayList'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='clone', arguments=[], type_arguments=[], target=FieldAccess(name='children', target='this'))))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='Exception'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[Return(result=Literal(value='null'))]))], _finally=None, resources=[])], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getContent', modifiers=['public'], type_parameters=[], parameters=[], return_type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=FieldAccess(name='contents', target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getLineNr', modifiers=['public'], type_parameters=[], parameters=[], return_type='int', body=[Return(result=FieldAccess(name='lineNr', target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=MethodInvocation(name='getAttribute', arguments=[Name(value='name'), Literal(value='null')], type_arguments=[], target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultValue', dimensions=0), type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), VariableDeclaration(type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='value', dimensions=0), initializer=MethodInvocation(name='get', arguments=[Name(value='name')], type_arguments=[], target=FieldAccess(name='attributes', target='this')))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='value'), rhs=Literal(value='null')), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='value'), rhs=Name(value='defaultValue'))]), if_false=None), Return(result=Name(value='value'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='valueSet', dimensions=0), type=Type(name=Name(value='Map'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultKey', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='allowLiterals', dimensions=0), type='boolean', modifiers=[], vararg=False)], return_type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), VariableDeclaration(type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='key', dimensions=0), initializer=MethodInvocation(name='get', arguments=[Name(value='name')], type_arguments=[], target=FieldAccess(name='attributes', target='this')))], modifiers=[]), VariableDeclaration(type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='result', dimensions=0), initializer=None)], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='key'), rhs=Literal(value='null')), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='key'), rhs=Name(value='defaultKey'))]), if_false=None), Assignment(operator='=', lhs=Name(value='result'), rhs=MethodInvocation(name='get', arguments=[Name(value='key')], type_arguments=[], target=Name(value='valueSet'))), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='result'), rhs=Literal(value='null')), if_true=Block(statements=[IfThenElse(predicate=Name(value='allowLiterals'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='result'), rhs=Name(value='key'))]), if_false=Block(statements=[Throw(exception=MethodInvocation(name='invalidValue', arguments=[Name(value='name'), Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='key'))], type_arguments=[], target='this'))]))]), if_false=None), Return(result=Name(value='result'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getStringAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=MethodInvocation(name='getStringAttribute', arguments=[Name(value='name'), Literal(value='null')], type_arguments=[], target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getStringAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultValue', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='getAttribute', arguments=[Name(value='name'), Name(value='defaultValue')], type_arguments=[], target='this')))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getStringAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='valueSet', dimensions=0), type=Type(name=Name(value='HashMap'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultKey', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='allowLiterals', dimensions=0), type='boolean', modifiers=[], vararg=False)], return_type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='getAttribute', arguments=[Name(value='name'), Name(value='valueSet'), Name(value='defaultKey'), Name(value='allowLiterals')], type_arguments=[], target='this')))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getIntAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='int', body=[Return(result=MethodInvocation(name='getIntAttribute', arguments=[Name(value='name'), Literal(value='0')], type_arguments=[], target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getIntAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultValue', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='int', body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='value', dimensions=0), initializer=Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='get', arguments=[Name(value='name')], type_arguments=[], target=FieldAccess(name='attributes', target='this'))))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='value'), rhs=Literal(value='null')), if_true=Block(statements=[Return(result=Name(value='defaultValue'))]), if_false=Block(statements=[Try(block=Block(statements=[Return(result=MethodInvocation(name='parseInt', arguments=[Name(value='value')], type_arguments=[], target=Name(value='Integer')))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='NumberFormatException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[Throw(exception=MethodInvocation(name='invalidValue', arguments=[Name(value='name'), Name(value='value')], type_arguments=[], target='this'))]))], _finally=None, resources=[])]))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getIntAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='min', dimensions=0), type='int', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='max', dimensions=0), type='int', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultValue', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='int', body=[VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='v', dimensions=0), initializer=MethodInvocation(name='getIntAttribute', arguments=[Name(value='name'), Name(value='defaultValue')], type_arguments=[], target=None))], modifiers=[]), IfThenElse(predicate=Relational(operator='<', lhs=Name(value='v'), rhs=Name(value='min')), if_true=Return(result=Name(value='min')), if_false=None), IfThenElse(predicate=Relational(operator='>', lhs=Name(value='v'), rhs=Name(value='max')), if_true=Return(result=Name(value='max')), if_false=None), Return(result=Name(value='v'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getIntAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='valueSet', dimensions=0), type=Type(name=Name(value='HashMap'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultKey', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='allowLiteralNumbers', dimensions=0), type='boolean', modifiers=[], vararg=False)], return_type='int', body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), VariableDeclaration(type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='key', dimensions=0), initializer=MethodInvocation(name='get', arguments=[Name(value='name')], type_arguments=[], target=FieldAccess(name='attributes', target='this')))], modifiers=[]), VariableDeclaration(type=Type(name=Name(value='Integer'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='result', dimensions=0), initializer=None)], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='key'), rhs=Literal(value='null')), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='key'), rhs=Name(value='defaultKey'))]), if_false=None), Try(block=Block(statements=[Assignment(operator='=', lhs=Name(value='result'), rhs=Cast(target=Type(name=Name(value='Integer'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='get', arguments=[Name(value='key')], type_arguments=[], target=Name(value='valueSet'))))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='ClassCastException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[Throw(exception=MethodInvocation(name='invalidValueSet', arguments=[Name(value='name')], type_arguments=[], target='this'))]))], _finally=None, resources=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='result'), rhs=Literal(value='null')), if_true=Block(statements=[IfThenElse(predicate=Unary(sign='!', expression=Name(value='allowLiteralNumbers')), if_true=Block(statements=[Throw(exception=MethodInvocation(name='invalidValue', arguments=[Name(value='name'), Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='key'))], type_arguments=[], target='this'))]), if_false=None), Try(block=Block(statements=[Assignment(operator='=', lhs=Name(value='result'), rhs=MethodInvocation(name='valueOf', arguments=[Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='key'))], type_arguments=[], target=Name(value='Integer')))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='NumberFormatException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[Throw(exception=MethodInvocation(name='invalidValue', arguments=[Name(value='name'), Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='key'))], type_arguments=[], target='this'))]))], _finally=None, resources=[])]), if_false=None), Return(result=MethodInvocation(name='intValue', arguments=[], type_arguments=[], target=Name(value='result')))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getDoubleAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='double', body=[Return(result=MethodInvocation(name='getDoubleAttribute', arguments=[Name(value='name'), Literal(value='0.')], type_arguments=[], target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getDoubleAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultValue', dimensions=0), type='double', modifiers=[], vararg=False)], return_type='double', body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='value', dimensions=0), initializer=Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='get', arguments=[Name(value='name')], type_arguments=[], target=FieldAccess(name='attributes', target='this'))))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='value'), rhs=Literal(value='null')), if_true=Block(statements=[Return(result=Name(value='defaultValue'))]), if_false=Block(statements=[Try(block=Block(statements=[Return(result=MethodInvocation(name='doubleValue', arguments=[], type_arguments=[], target=MethodInvocation(name='valueOf', arguments=[Name(value='value')], type_arguments=[], target=Name(value='Double'))))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='NumberFormatException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[Throw(exception=MethodInvocation(name='invalidValue', arguments=[Name(value='name'), Name(value='value')], type_arguments=[], target='this'))]))], _finally=None, resources=[])]))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getDoubleAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='valueSet', dimensions=0), type=Type(name=Name(value='HashMap'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultKey', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='allowLiteralNumbers', dimensions=0), type='boolean', modifiers=[], vararg=False)], return_type='double', body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), VariableDeclaration(type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='key', dimensions=0), initializer=MethodInvocation(name='get', arguments=[Name(value='name')], type_arguments=[], target=FieldAccess(name='attributes', target='this')))], modifiers=[]), VariableDeclaration(type=Type(name=Name(value='Double'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='result', dimensions=0), initializer=None)], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='key'), rhs=Literal(value='null')), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='key'), rhs=Name(value='defaultKey'))]), if_false=None), Try(block=Block(statements=[Assignment(operator='=', lhs=Name(value='result'), rhs=Cast(target=Type(name=Name(value='Double'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='get', arguments=[Name(value='key')], type_arguments=[], target=Name(value='valueSet'))))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='ClassCastException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[Throw(exception=MethodInvocation(name='invalidValueSet', arguments=[Name(value='name')], type_arguments=[], target='this'))]))], _finally=None, resources=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='result'), rhs=Literal(value='null')), if_true=Block(statements=[IfThenElse(predicate=Unary(sign='!', expression=Name(value='allowLiteralNumbers')), if_true=Block(statements=[Throw(exception=MethodInvocation(name='invalidValue', arguments=[Name(value='name'), Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='key'))], type_arguments=[], target='this'))]), if_false=None), Try(block=Block(statements=[Assignment(operator='=', lhs=Name(value='result'), rhs=MethodInvocation(name='valueOf', arguments=[Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='key'))], type_arguments=[], target=Name(value='Double')))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='NumberFormatException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[Throw(exception=MethodInvocation(name='invalidValue', arguments=[Name(value='name'), Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='key'))], type_arguments=[], target='this'))]))], _finally=None, resources=[])]), if_false=None), Return(result=MethodInvocation(name='doubleValue', arguments=[], type_arguments=[], target=Name(value='result')))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getBooleanAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='trueValue', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='falseValue', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultValue', dimensions=0), type='boolean', modifiers=[], vararg=False)], return_type='boolean', body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), VariableDeclaration(type=Type(name=Name(value='Object'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='value', dimensions=0), initializer=MethodInvocation(name='get', arguments=[Name(value='name')], type_arguments=[], target=FieldAccess(name='attributes', target='this')))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='value'), rhs=Literal(value='null')), if_true=Block(statements=[Return(result=Name(value='defaultValue'))]), if_false=IfThenElse(predicate=MethodInvocation(name='equals', arguments=[Name(value='trueValue')], type_arguments=[], target=Name(value='value')), if_true=Block(statements=[Return(result=Literal(value='true'))]), if_false=IfThenElse(predicate=MethodInvocation(name='equals', arguments=[Name(value='falseValue')], type_arguments=[], target=Name(value='value')), if_true=Block(statements=[Return(result=Literal(value='false'))]), if_false=Block(statements=[Throw(exception=MethodInvocation(name='invalidValue', arguments=[Name(value='name'), Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='value'))], type_arguments=[], target='this'))]))))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getBooleanAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='defaultValue', dimensions=0), type='boolean', modifiers=[], vararg=False)], return_type='boolean', body=[Return(result=MethodInvocation(name='getBooleanAttribute', arguments=[Name(value='name'), Literal(value='"true"'), Literal(value='"false"'), Name(value='defaultValue')], type_arguments=[], target=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getName', modifiers=['public'], type_parameters=[], parameters=[], return_type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=FieldAccess(name='name', target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='parseFromReader', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='reader', dimensions=0), type=Type(name=Name(value='Reader'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[MethodInvocation(name='parseFromReader', arguments=[Name(value='reader'), Literal(value='1')], type_arguments=[], target='this')], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0), Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='parseFromReader', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='reader', dimensions=0), type=Type(name=Name(value='Reader'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='startingLineNr', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[Assignment(operator='=', lhs=FieldAccess(name='name', target='this'), rhs=Literal(value='null')), Assignment(operator='=', lhs=FieldAccess(name='contents', target='this'), rhs=Literal(value='""')), Assignment(operator='=', lhs=FieldAccess(name='attributes', target='this'), rhs=InstanceCreation(type=Type(name=Name(value='HashMap'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[], body=[], enclosed_in=None)), Assignment(operator='=', lhs=FieldAccess(name='children', target='this'), rhs=InstanceCreation(type=Type(name=Name(value='ArrayList'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[], body=[], enclosed_in=None)), Assignment(operator='=', lhs=FieldAccess(name='charReadTooMuch', target='this'), rhs=Literal(value="'\\0'")), Assignment(operator='=', lhs=FieldAccess(name='reader', target='this'), rhs=Name(value='reader')), Assignment(operator='=', lhs=FieldAccess(name='parserLineNr', target='this'), rhs=Name(value='startingLineNr')), For(init=None, predicate=None, update=None, body=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='scanWhitespace', arguments=[], type_arguments=[], target='this'))], modifiers=[]), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'<'")), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='"<"')], type_arguments=[], target='this'))]), if_false=None), Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=ConditionalOr(operator='||', lhs=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'!'")), rhs=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'?'"))), if_true=Block(statements=[MethodInvocation(name='skipSpecialTag', arguments=[Literal(value='0')], type_arguments=[], target='this')]), if_false=Block(statements=[MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this'), MethodInvocation(name='scanElement', arguments=['this'], type_arguments=[], target='this'), Return(result=None)]))]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0), Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='parseString', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='string', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[Try(block=Block(statements=[MethodInvocation(name='parseFromReader', arguments=[InstanceCreation(type=Type(name=Name(value='StringReader'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[Name(value='string')], body=[], enclosed_in=None), Literal(value='1')], type_arguments=[], target='this')]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[]))], _finally=None, resources=[])], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='parseString', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='string', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='offset', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[MethodInvocation(name='parseString', arguments=[MethodInvocation(name='substring', arguments=[Name(value='offset')], type_arguments=[], target=Name(value='string'))], type_arguments=[], target='this')], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='parseString', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='string', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='offset', dimensions=0), type='int', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='end', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[MethodInvocation(name='parseString', arguments=[MethodInvocation(name='substring', arguments=[Name(value='offset'), Name(value='end')], type_arguments=[], target=Name(value='string'))], type_arguments=[], target='this')], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='parseString', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='string', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='offset', dimensions=0), type='int', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='end', dimensions=0), type='int', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='startingLineNr', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[Assignment(operator='=', lhs=Name(value='string'), rhs=MethodInvocation(name='substring', arguments=[Name(value='offset'), Name(value='end')], type_arguments=[], target=Name(value='string'))), Try(block=Block(statements=[MethodInvocation(name='parseFromReader', arguments=[InstanceCreation(type=Type(name=Name(value='StringReader'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[Name(value='string')], body=[], enclosed_in=None), Name(value='startingLineNr')], type_arguments=[], target='this')]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[]))], _finally=None, resources=[])], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='parseCharArray', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='input', dimensions=0), type=Type(name='char', type_arguments=[], enclosed_in=None, dimensions=1), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='offset', dimensions=0), type='int', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='end', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[MethodInvocation(name='parseCharArray', arguments=[Name(value='input'), Name(value='offset'), Name(value='end'), Literal(value='1')], type_arguments=[], target='this')], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='parseCharArray', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='input', dimensions=0), type=Type(name='char', type_arguments=[], enclosed_in=None, dimensions=1), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='offset', dimensions=0), type='int', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='end', dimensions=0), type='int', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='startingLineNr', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[Try(block=Block(statements=[VariableDeclaration(type=Type(name=Name(value='Reader'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='reader', dimensions=0), initializer=InstanceCreation(type=Type(name=Name(value='CharArrayReader'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[Name(value='input'), Name(value='offset'), Name(value='end')], body=[], enclosed_in=None))], modifiers=[]), MethodInvocation(name='parseFromReader', arguments=[Name(value='reader'), Name(value='startingLineNr')], type_arguments=[], target='this')]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[]))], _finally=None, resources=[])], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='removeChild', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='child', dimensions=0), type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[MethodInvocation(name='remove', arguments=[Name(value='child')], type_arguments=[], target=FieldAccess(name='children', target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='removeAttribute', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[IfThenElse(predicate=FieldAccess(name='ignoreCase', target='this'), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='name'), rhs=MethodInvocation(name='toUpperCase', arguments=[], type_arguments=[], target=Name(value='name')))]), if_false=None), MethodInvocation(name='remove', arguments=[Name(value='name')], type_arguments=[], target=FieldAccess(name='attributes', target='this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='createElement', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='elem', dimensions=0), initializer=MethodInvocation(name='createElement', arguments=[], type_arguments=[], target=None))], modifiers=[]), MethodInvocation(name='setName', arguments=[Name(value='name')], type_arguments=[], target=Name(value='elem')), Return(result=Name(value='elem'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='createElement', modifiers=['protected'], type_parameters=[], parameters=[], return_type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=InstanceCreation(type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[FieldAccess(name='entities', target='this'), FieldAccess(name='ignoreWhitespace', target='this'), Literal(value='false'), FieldAccess(name='ignoreCase', target='this'), FieldAccess(name='isEncodeUnicodeCharacters', target='this')], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='setContent', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='content', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[Assignment(operator='=', lhs=FieldAccess(name='contents', target='this'), rhs=Name(value='content'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='setName', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[Assignment(operator='=', lhs=FieldAccess(name='name', target='this'), rhs=Name(value='name'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='toString', modifiers=['public'], type_parameters=[], parameters=[], return_type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Try(block=Block(statements=[VariableDeclaration(type=Type(name=Name(value='ByteArrayOutputStream'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='out', dimensions=0), initializer=InstanceCreation(type=Type(name=Name(value='ByteArrayOutputStream'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[], body=[], enclosed_in=None))], modifiers=[]), VariableDeclaration(type=Type(name=Name(value='OutputStreamWriter'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='writer', dimensions=0), initializer=InstanceCreation(type=Type(name=Name(value='OutputStreamWriter'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[Name(value='out')], body=[], enclosed_in=None))], modifiers=[]), MethodInvocation(name='write', arguments=[Name(value='writer')], type_arguments=[], target='this'), MethodInvocation(name='flush', arguments=[], type_arguments=[], target=Name(value='writer')), Return(result=InstanceCreation(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[MethodInvocation(name='toByteArray', arguments=[], type_arguments=[], target=Name(value='out'))], body=[], enclosed_in=None))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[Return(result=MethodInvocation(name='toString', arguments=[], type_arguments=[], target='super'))]))], _finally=None, resources=[])], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='write', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='writer', dimensions=0), type=Type(name=Name(value='Writer'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[IfThenElse(predicate=Equality(operator='==', lhs=FieldAccess(name='name', target='this'), rhs=Literal(value='null')), if_true=Block(statements=[MethodInvocation(name='writeEncoded', arguments=[Name(value='writer'), FieldAccess(name='contents', target='this')], type_arguments=[], target='this'), Return(result=None)]), if_false=None), MethodInvocation(name='write', arguments=[Literal(value="'<'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[FieldAccess(name='name', target='this')], type_arguments=[], target=Name(value='writer')), IfThenElse(predicate=Unary(sign='!', expression=MethodInvocation(name='isEmpty', arguments=[], type_arguments=[], target=FieldAccess(name='attributes', target='this'))), if_true=Block(statements=[VariableDeclaration(type=Type(name=Name(value='Iterator'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='iter', dimensions=0), initializer=MethodInvocation(name='iterator', arguments=[], type_arguments=[], target=MethodInvocation(name='keySet', arguments=[], type_arguments=[], target=FieldAccess(name='attributes', target='this'))))], modifiers=[]), While(predicate=MethodInvocation(name='hasNext', arguments=[], type_arguments=[], target=Name(value='iter')), body=Block(statements=[MethodInvocation(name='write', arguments=[Literal(value="' '")], type_arguments=[], target=Name(value='writer')), VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='key', dimensions=0), initializer=Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='next', arguments=[], type_arguments=[], target=Name(value='iter'))))], modifiers=[]), VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='value', dimensions=0), initializer=Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='get', arguments=[Name(value='key')], type_arguments=[], target=FieldAccess(name='attributes', target='this'))))], modifiers=[]), MethodInvocation(name='write', arguments=[Name(value='key')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'='")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value='\'"\'')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='writeEncoded', arguments=[Name(value='writer'), Name(value='value')], type_arguments=[], target='this'), MethodInvocation(name='write', arguments=[Literal(value='\'"\'')], type_arguments=[], target=Name(value='writer'))]))]), if_false=None), IfThenElse(predicate=ConditionalAnd(operator='&&', lhs=Equality(operator='!=', lhs=FieldAccess(name='contents', target='this'), rhs=Literal(value='null')), rhs=Relational(operator='>', lhs=MethodInvocation(name='length', arguments=[], type_arguments=[], target=FieldAccess(name='contents', target='this')), rhs=Literal(value='0'))), if_true=Block(statements=[MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='writeEncoded', arguments=[Name(value='writer'), FieldAccess(name='contents', target='this')], type_arguments=[], target='this'), MethodInvocation(name='write', arguments=[Literal(value="'<'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'/'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[FieldAccess(name='name', target='this')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer'))]), if_false=IfThenElse(predicate=MethodInvocation(name='isEmpty', arguments=[], type_arguments=[], target=FieldAccess(name='children', target='this')), if_true=Block(statements=[MethodInvocation(name='write', arguments=[Literal(value="'/'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer'))]), if_false=Block(statements=[MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer')), VariableDeclaration(type=Type(name=Name(value='Iterator'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='iter', dimensions=0), initializer=MethodInvocation(name='iterateChildren', arguments=[], type_arguments=[], target='this'))], modifiers=[]), While(predicate=MethodInvocation(name='hasNext', arguments=[], type_arguments=[], target=Name(value='iter')), body=Block(statements=[VariableDeclaration(type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='child', dimensions=0), initializer=Cast(target=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='next', arguments=[], type_arguments=[], target=Name(value='iter'))))], modifiers=[]), MethodInvocation(name='write', arguments=[Name(value='writer')], type_arguments=[], target=Name(value='child'))])), MethodInvocation(name='write', arguments=[Literal(value="'<'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'/'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[FieldAccess(name='name', target='this')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer'))])))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='print', modifiers=['public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='writer', dimensions=0), type=Type(name=Name(value='PrintWriter'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[MethodInvocation(name='print', arguments=[Name(value='writer'), Literal(value='0')], type_arguments=[], target=None)], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='print', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='writer', dimensions=0), type=Type(name=Name(value='PrintWriter'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='indent', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[Try(block=Block(statements=[IfThenElse(predicate=Equality(operator='==', lhs=FieldAccess(name='name', target='this'), rhs=Literal(value='null')), if_true=Block(statements=[MethodInvocation(name='writeEncoded', arguments=[Name(value='writer'), FieldAccess(name='contents', target='this')], type_arguments=[], target='this'), Return(result=None)]), if_false=None), VariableDeclaration(type=Type(name='char', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='spaces', dimensions=0), initializer=ArrayCreation(type='char', dimensions=[Multiplicative(operator='*', lhs=Name(value='indent'), rhs=Literal(value='2'))], initializer=None))], modifiers=[]), MethodInvocation(name='fill', arguments=[Name(value='spaces'), Literal(value="' '")], type_arguments=[], target=Name(value='Arrays')), MethodInvocation(name='write', arguments=[Name(value='spaces')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'<'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[FieldAccess(name='name', target='this')], type_arguments=[], target=Name(value='writer')), IfThenElse(predicate=Unary(sign='!', expression=MethodInvocation(name='isEmpty', arguments=[], type_arguments=[], target=FieldAccess(name='attributes', target='this'))), if_true=Block(statements=[VariableDeclaration(type=Type(name=Name(value='Iterator'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='enm', dimensions=0), initializer=MethodInvocation(name='iterator', arguments=[], type_arguments=[], target=MethodInvocation(name='keySet', arguments=[], type_arguments=[], target=FieldAccess(name='attributes', target='this'))))], modifiers=[]), While(predicate=MethodInvocation(name='hasNext', arguments=[], type_arguments=[], target=Name(value='enm')), body=Block(statements=[MethodInvocation(name='write', arguments=[Literal(value="' '")], type_arguments=[], target=Name(value='writer')), VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='key', dimensions=0), initializer=Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='next', arguments=[], type_arguments=[], target=Name(value='enm'))))], modifiers=[]), VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='value', dimensions=0), initializer=Cast(target=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='get', arguments=[Name(value='key')], type_arguments=[], target=FieldAccess(name='attributes', target='this'))))], modifiers=[]), MethodInvocation(name='write', arguments=[Name(value='key')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'='")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value='\'"\'')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='writeEncoded', arguments=[Name(value='writer'), Name(value='value')], type_arguments=[], target='this'), MethodInvocation(name='write', arguments=[Literal(value='\'"\'')], type_arguments=[], target=Name(value='writer'))]))]), if_false=None), IfThenElse(predicate=ConditionalAnd(operator='&&', lhs=Equality(operator='!=', lhs=FieldAccess(name='contents', target='this'), rhs=Literal(value='null')), rhs=Relational(operator='>', lhs=MethodInvocation(name='length', arguments=[], type_arguments=[], target=FieldAccess(name='contents', target='this')), rhs=Literal(value='0'))), if_true=Block(statements=[MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='writeEncoded', arguments=[Name(value='writer'), FieldAccess(name='contents', target='this')], type_arguments=[], target='this'), MethodInvocation(name='write', arguments=[Literal(value="'<'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'/'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[FieldAccess(name='name', target='this')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer'))]), if_false=IfThenElse(predicate=MethodInvocation(name='isEmpty', arguments=[], type_arguments=[], target=FieldAccess(name='children', target='this')), if_true=Block(statements=[MethodInvocation(name='write', arguments=[Literal(value="'/'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer'))]), if_false=Block(statements=[MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'\\n'")], type_arguments=[], target=Name(value='writer')), VariableDeclaration(type=Type(name=Name(value='Iterator'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='enm', dimensions=0), initializer=MethodInvocation(name='iterator', arguments=[], type_arguments=[], target=MethodInvocation(name='getChildren', arguments=[], type_arguments=[], target='this')))], modifiers=[]), While(predicate=MethodInvocation(name='hasNext', arguments=[], type_arguments=[], target=Name(value='enm')), body=Block(statements=[VariableDeclaration(type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='child', dimensions=0), initializer=Cast(target=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='next', arguments=[], type_arguments=[], target=Name(value='enm'))))], modifiers=[]), MethodInvocation(name='print', arguments=[Name(value='writer'), Additive(operator='+', lhs=Name(value='indent'), rhs=Literal(value='1'))], type_arguments=[], target=Name(value='child'))])), MethodInvocation(name='write', arguments=[Name(value='spaces')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'<'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'/'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[FieldAccess(name='name', target='this')], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='writer'))]))), MethodInvocation(name='write', arguments=[Literal(value="'\\n'")], type_arguments=[], target=Name(value='writer'))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[VariableDeclaration(type=Type(name=Name(value='InternalError'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='error', dimensions=0), initializer=InstanceCreation(type=Type(name=Name(value='InternalError'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[MethodInvocation(name='getMessage', arguments=[], type_arguments=[], target=Name(value='e'))], body=[], enclosed_in=None))], modifiers=[]), MethodInvocation(name='initCause', arguments=[Name(value='e')], type_arguments=[], target=Name(value='error')), Throw(exception=Name(value='error'))]))], _finally=None, resources=[])], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='writeEncoded', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='writer', dimensions=0), type=Type(name=Name(value='Writer'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='str', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=MethodInvocation(name='length', arguments=[], type_arguments=[], target=Name(value='str'))), update=[Assignment(operator='+=', lhs=Name(value='i'), rhs=Literal(value='1'))], body=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='charAt', arguments=[Name(value='i')], type_arguments=[], target=Name(value='str')))], modifiers=[]), Switch(expression=Name(value='ch'), switch_cases=[SwitchCase(cases=[Literal(value="'<'")], body=[MethodInvocation(name='write', arguments=[Literal(value="'&'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'l'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'t'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="';'")], type_arguments=[], target=Name(value='writer')), Break(label=None)]), SwitchCase(cases=[Literal(value="'>'")], body=[MethodInvocation(name='write', arguments=[Literal(value="'&'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'g'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'t'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="';'")], type_arguments=[], target=Name(value='writer')), Break(label=None)]), SwitchCase(cases=[Literal(value="'&'")], body=[MethodInvocation(name='write', arguments=[Literal(value="'&'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'a'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'m'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'p'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="';'")], type_arguments=[], target=Name(value='writer')), Break(label=None)]), SwitchCase(cases=[Literal(value='\'"\'')], body=[MethodInvocation(name='write', arguments=[Literal(value="'&'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'q'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'u'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'o'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'t'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="';'")], type_arguments=[], target=Name(value='writer')), Break(label=None)]), SwitchCase(cases=[Literal(value="'\\''")], body=[MethodInvocation(name='write', arguments=[Literal(value="'&'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'a'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'p'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'o'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'s'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="';'")], type_arguments=[], target=Name(value='writer')), Break(label=None)]), SwitchCase(cases=['default'], body=[VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='unicode', dimensions=0), initializer=Cast(target=Type(name='int', type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='ch')))], modifiers=[]), IfThenElse(predicate=ConditionalOr(operator='||', lhs=Relational(operator='<', lhs=Name(value='unicode'), rhs=Literal(value='32')), rhs=ConditionalAnd(operator='&&', lhs=Name(value='isEncodeUnicodeCharacters'), rhs=Relational(operator='>', lhs=Name(value='unicode'), rhs=Literal(value='126')))), if_true=Block(statements=[MethodInvocation(name='write', arguments=[Literal(value="'&'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'#'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="'x'")], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[MethodInvocation(name='toString', arguments=[Name(value='unicode'), Literal(value='16')], type_arguments=[], target=Name(value='Integer'))], type_arguments=[], target=Name(value='writer')), MethodInvocation(name='write', arguments=[Literal(value="';'")], type_arguments=[], target=Name(value='writer'))]), if_false=Block(statements=[MethodInvocation(name='write', arguments=[Name(value='ch')], type_arguments=[], target=Name(value='writer'))]))])])]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='scanIdentifier', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='result', dimensions=0), type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[For(init=None, predicate=None, update=None, body=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), IfThenElse(predicate=ConditionalAnd(operator='&&', lhs=ConditionalAnd(operator='&&', lhs=ConditionalAnd(operator='&&', lhs=ConditionalAnd(operator='&&', lhs=ConditionalAnd(operator='&&', lhs=ConditionalAnd(operator='&&', lhs=ConditionalAnd(operator='&&', lhs=ConditionalOr(operator='||', lhs=Relational(operator='<', lhs=Name(value='ch'), rhs=Literal(value="'A'")), rhs=Relational(operator='>', lhs=Name(value='ch'), rhs=Literal(value="'Z'"))), rhs=ConditionalOr(operator='||', lhs=Relational(operator='<', lhs=Name(value='ch'), rhs=Literal(value="'a'")), rhs=Relational(operator='>', lhs=Name(value='ch'), rhs=Literal(value="'z'")))), rhs=ConditionalOr(operator='||', lhs=Relational(operator='<', lhs=Name(value='ch'), rhs=Literal(value="'0'")), rhs=Relational(operator='>', lhs=Name(value='ch'), rhs=Literal(value="'9'")))), rhs=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'_'"))), rhs=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'.'"))), rhs=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="':'"))), rhs=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'-'"))), rhs=Relational(operator='<=', lhs=Name(value='ch'), rhs=Literal(value="'\\u007E'"))), if_true=Block(statements=[MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this'), Return(result=None)]), if_false=None), MethodInvocation(name='append', arguments=[Name(value='ch')], type_arguments=[], target=Name(value='result'))]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='scanWhitespace', modifiers=['protected'], type_parameters=[], parameters=[], return_type='char', body=[For(init=None, predicate=None, update=None, body=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), Switch(expression=Name(value='ch'), switch_cases=[SwitchCase(cases=[Literal(value="' '"), Literal(value="'\\t'"), Literal(value="'\\n'"), Literal(value="'\\r'")], body=[Break(label=None)]), SwitchCase(cases=['default'], body=[Return(result=Name(value='ch'))])])]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='scanWhitespace', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='result', dimensions=0), type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='char', body=[For(init=None, predicate=None, update=None, body=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), Switch(expression=Name(value='ch'), switch_cases=[SwitchCase(cases=[Literal(value="' '"), Literal(value="'\\t'"), Literal(value="'\\n'")], body=[MethodInvocation(name='append', arguments=[Name(value='ch')], type_arguments=[], target=Name(value='result'))]), SwitchCase(cases=[Literal(value="'\\r'")], body=[Break(label=None)]), SwitchCase(cases=['default'], body=[Return(result=Name(value='ch'))])])]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='scanString', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='string', dimensions=0), type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='delimiter', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), IfThenElse(predicate=ConditionalAnd(operator='&&', lhs=Equality(operator='!=', lhs=Name(value='delimiter'), rhs=Literal(value="'\\''")), rhs=Equality(operator='!=', lhs=Name(value='delimiter'), rhs=Literal(value='\'"\''))), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='"\' or \\""')], type_arguments=[], target='this'))]), if_false=None), For(init=None, predicate=None, update=None, body=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Name(value='delimiter')), if_true=Block(statements=[Return(result=None)]), if_false=IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'&'")), if_true=Block(statements=[MethodInvocation(name='resolveEntity', arguments=[Name(value='string')], type_arguments=[], target='this')]), if_false=Block(statements=[MethodInvocation(name='append', arguments=[Name(value='ch')], type_arguments=[], target=Name(value='string'))])))]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='scanPCData', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='data', dimensions=0), type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[For(init=None, predicate=None, update=None, body=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'<'")), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'!'")), if_true=Block(statements=[MethodInvocation(name='checkCDATA', arguments=[Name(value='data')], type_arguments=[], target='this')]), if_false=Block(statements=[MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this'), Return(result=None)]))]), if_false=IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'&'")), if_true=Block(statements=[MethodInvocation(name='resolveEntity', arguments=[Name(value='data')], type_arguments=[], target='this')]), if_false=Block(statements=[MethodInvocation(name='append', arguments=[Name(value='ch')], type_arguments=[], target=Name(value='data'))])))]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='checkCDATA', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='buf', dimensions=0), type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='boolean', body=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'['")), if_true=Block(statements=[MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this'), MethodInvocation(name='skipSpecialTag', arguments=[Literal(value='0')], type_arguments=[], target='this'), Return(result=Literal(value='false'))]), if_false=IfThenElse(predicate=Unary(sign='!', expression=MethodInvocation(name='checkLiteral', arguments=[Literal(value='"CDATA["')], type_arguments=[], target='this')), if_true=Block(statements=[MethodInvocation(name='skipSpecialTag', arguments=[Literal(value='1')], type_arguments=[], target='this'), Return(result=Literal(value='false'))]), if_false=Block(statements=[VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='delimiterCharsSkipped', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), While(predicate=Relational(operator='<', lhs=Name(value='delimiterCharsSkipped'), rhs=Literal(value='3')), body=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), Switch(expression=Name(value='ch'), switch_cases=[SwitchCase(cases=[Literal(value="']'")], body=[IfThenElse(predicate=Relational(operator='<', lhs=Name(value='delimiterCharsSkipped'), rhs=Literal(value='2')), if_true=Block(statements=[Assignment(operator='+=', lhs=Name(value='delimiterCharsSkipped'), rhs=Literal(value='1'))]), if_false=Block(statements=[MethodInvocation(name='append', arguments=[Literal(value="']'")], type_arguments=[], target=Name(value='buf')), MethodInvocation(name='append', arguments=[Literal(value="']'")], type_arguments=[], target=Name(value='buf')), Assignment(operator='=', lhs=Name(value='delimiterCharsSkipped'), rhs=Literal(value='0'))])), Break(label=None)]), SwitchCase(cases=[Literal(value="'>'")], body=[IfThenElse(predicate=Relational(operator='<', lhs=Name(value='delimiterCharsSkipped'), rhs=Literal(value='2')), if_true=Block(statements=[For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Name(value='delimiterCharsSkipped')), update=[Unary(sign='x++', expression=Name(value='i'))], body=Block(statements=[MethodInvocation(name='append', arguments=[Literal(value="']'")], type_arguments=[], target=Name(value='buf'))])), Assignment(operator='=', lhs=Name(value='delimiterCharsSkipped'), rhs=Literal(value='0')), MethodInvocation(name='append', arguments=[Literal(value="'>'")], type_arguments=[], target=Name(value='buf'))]), if_false=Block(statements=[Assignment(operator='=', lhs=Name(value='delimiterCharsSkipped'), rhs=Literal(value='3'))])), Break(label=None)]), SwitchCase(cases=['default'], body=[For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Name(value='delimiterCharsSkipped')), update=[Assignment(operator='+=', lhs=Name(value='i'), rhs=Literal(value='1'))], body=Block(statements=[MethodInvocation(name='append', arguments=[Literal(value="']'")], type_arguments=[], target=Name(value='buf'))])), MethodInvocation(name='append', arguments=[Name(value='ch')], type_arguments=[], target=Name(value='buf')), Assignment(operator='=', lhs=Name(value='delimiterCharsSkipped'), rhs=Literal(value='0'))])])])), Return(result=Literal(value='true'))])))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='skipComment', modifiers=['protected'], type_parameters=[], parameters=[], return_type='void', body=[VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='dashesToRead', dimensions=0), initializer=Literal(value='2'))], modifiers=[]), While(predicate=Relational(operator='>', lhs=Name(value='dashesToRead'), rhs=Literal(value='0')), body=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'-'")), if_true=Block(statements=[Assignment(operator='-=', lhs=Name(value='dashesToRead'), rhs=Literal(value='1'))]), if_false=Block(statements=[Assignment(operator='=', lhs=Name(value='dashesToRead'), rhs=Literal(value='2'))]))])), IfThenElse(predicate=Equality(operator='!=', lhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'), rhs=Literal(value="'>'")), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='">"')], type_arguments=[], target='this'))]), if_false=None)], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='skipSpecialTag', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='bracketLevel', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='tagLevel', dimensions=0), initializer=Literal(value='1'))], modifiers=[]), VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='stringDelimiter', dimensions=0), initializer=Literal(value="'\\0'"))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='bracketLevel'), rhs=Literal(value='0')), if_true=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'['")), if_true=Block(statements=[Assignment(operator='+=', lhs=Name(value='bracketLevel'), rhs=Literal(value='1'))]), if_false=IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'-'")), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'['")), if_true=Block(statements=[Assignment(operator='+=', lhs=Name(value='bracketLevel'), rhs=Literal(value='1'))]), if_false=IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="']'")), if_true=Block(statements=[Assignment(operator='-=', lhs=Name(value='bracketLevel'), rhs=Literal(value='1'))]), if_false=IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'-'")), if_true=Block(statements=[MethodInvocation(name='skipComment', arguments=[], type_arguments=[], target='this'), Return(result=None)]), if_false=None)))]), if_false=None))]), if_false=None), While(predicate=Relational(operator='>', lhs=Name(value='tagLevel'), rhs=Literal(value='0')), body=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='stringDelimiter'), rhs=Literal(value="'\\0'")), if_true=Block(statements=[IfThenElse(predicate=ConditionalOr(operator='||', lhs=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value='\'"\'')), rhs=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'\\''"))), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='stringDelimiter'), rhs=Name(value='ch'))]), if_false=IfThenElse(predicate=Relational(operator='<=', lhs=Name(value='bracketLevel'), rhs=Literal(value='0')), if_true=Block(statements=[IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'<'")), if_true=Block(statements=[Assignment(operator='+=', lhs=Name(value='tagLevel'), rhs=Literal(value='1'))]), if_false=IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'>'")), if_true=Block(statements=[Assignment(operator='-=', lhs=Name(value='tagLevel'), rhs=Literal(value='1'))]), if_false=None))]), if_false=None)), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'['")), if_true=Block(statements=[Assignment(operator='+=', lhs=Name(value='bracketLevel'), rhs=Literal(value='1'))]), if_false=IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="']'")), if_true=Block(statements=[Assignment(operator='-=', lhs=Name(value='bracketLevel'), rhs=Literal(value='1'))]), if_false=None))]), if_false=Block(statements=[IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Name(value='stringDelimiter')), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='stringDelimiter'), rhs=Literal(value="'\\0'"))]), if_false=None)]))]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='checkLiteral', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='literal', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='boolean', body=[VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='length', dimensions=0), initializer=MethodInvocation(name='length', arguments=[], type_arguments=[], target=Name(value='literal')))], modifiers=[]), For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Name(value='length')), update=[Assignment(operator='+=', lhs=Name(value='i'), rhs=Literal(value='1'))], body=Block(statements=[IfThenElse(predicate=Equality(operator='!=', lhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'), rhs=MethodInvocation(name='charAt', arguments=[Name(value='i')], type_arguments=[], target=Name(value='literal'))), if_true=Block(statements=[Return(result=Literal(value='false'))]), if_false=None)])), Return(result=Literal(value='true'))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='readChar', modifiers=['protected'], type_parameters=[], parameters=[], return_type='char', body=[IfThenElse(predicate=Equality(operator='!=', lhs=FieldAccess(name='charReadTooMuch', target='this'), rhs=Literal(value="'\\0'")), if_true=Block(statements=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=FieldAccess(name='charReadTooMuch', target='this'))], modifiers=[]), Assignment(operator='=', lhs=FieldAccess(name='charReadTooMuch', target='this'), rhs=Literal(value="'\\0'")), Return(result=Name(value='ch'))]), if_false=Block(statements=[VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=MethodInvocation(name='read', arguments=[], type_arguments=[], target=FieldAccess(name='reader', target='this')))], modifiers=[]), IfThenElse(predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Literal(value='0')), if_true=Block(statements=[Throw(exception=MethodInvocation(name='unexpectedEndOfData', arguments=[], type_arguments=[], target='this'))]), if_false=IfThenElse(predicate=Equality(operator='==', lhs=Name(value='i'), rhs=Literal(value='10')), if_true=Block(statements=[Assignment(operator='+=', lhs=FieldAccess(name='parserLineNr', target='this'), rhs=Literal(value='1')), Return(result=Literal(value="'\\n'"))]), if_false=Block(statements=[Return(result=Cast(target=Type(name='char', type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='i')))])))]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='scanElement', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='elt', dimensions=0), type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[VariableDeclaration(type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='buf', dimensions=0), initializer=InstanceCreation(type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[], body=[], enclosed_in=None))], modifiers=[]), MethodInvocation(name='scanIdentifier', arguments=[Name(value='buf')], type_arguments=[], target='this'), VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='name', dimensions=0), initializer=MethodInvocation(name='toString', arguments=[], type_arguments=[], target=Name(value='buf')))], modifiers=[]), MethodInvocation(name='setName', arguments=[Name(value='name')], type_arguments=[], target=Name(value='elt')), VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=MethodInvocation(name='scanWhitespace', arguments=[], type_arguments=[], target='this'))], modifiers=[]), While(predicate=ConditionalAnd(operator='&&', lhs=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'>'")), rhs=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'/'"))), body=Block(statements=[MethodInvocation(name='setLength', arguments=[Literal(value='0')], type_arguments=[], target=Name(value='buf')), MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this'), MethodInvocation(name='scanIdentifier', arguments=[Name(value='buf')], type_arguments=[], target='this'), VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='key', dimensions=0), initializer=MethodInvocation(name='toString', arguments=[], type_arguments=[], target=Name(value='buf')))], modifiers=[]), Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='scanWhitespace', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'='")), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='"="')], type_arguments=[], target='this'))]), if_false=None), MethodInvocation(name='unreadChar', arguments=[MethodInvocation(name='scanWhitespace', arguments=[], type_arguments=[], target='this')], type_arguments=[], target='this'), MethodInvocation(name='setLength', arguments=[Literal(value='0')], type_arguments=[], target=Name(value='buf')), MethodInvocation(name='scanString', arguments=[Name(value='buf')], type_arguments=[], target='this'), MethodInvocation(name='setAttribute', arguments=[Name(value='key'), Name(value='buf')], type_arguments=[], target=Name(value='elt')), Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='scanWhitespace', arguments=[], type_arguments=[], target='this'))])), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'/'")), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'>'")), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='">"')], type_arguments=[], target='this'))]), if_false=None), Return(result=None)]), if_false=None), MethodInvocation(name='setLength', arguments=[Literal(value='0')], type_arguments=[], target=Name(value='buf')), Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='scanWhitespace', arguments=[Name(value='buf')], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'<'")), if_true=Block(statements=[MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this'), MethodInvocation(name='scanPCData', arguments=[Name(value='buf')], type_arguments=[], target='this')]), if_false=Block(statements=[For(init=None, predicate=None, update=None, body=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'!'")), if_true=Block(statements=[IfThenElse(predicate=MethodInvocation(name='checkCDATA', arguments=[Name(value='buf')], type_arguments=[], target='this'), if_true=Block(statements=[MethodInvocation(name='scanPCData', arguments=[Name(value='buf')], type_arguments=[], target='this'), Break(label=None)]), if_false=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='scanWhitespace', arguments=[Name(value='buf')], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'<'")), if_true=Block(statements=[MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this'), MethodInvocation(name='scanPCData', arguments=[Name(value='buf')], type_arguments=[], target='this'), Break(label=None)]), if_false=None)]))]), if_false=Block(statements=[IfThenElse(predicate=ConditionalOr(operator='||', lhs=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'/'")), rhs=FieldAccess(name='ignoreWhitespace', target='this')), if_true=Block(statements=[MethodInvocation(name='setLength', arguments=[Literal(value='0')], type_arguments=[], target=Name(value='buf'))]), if_false=None), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'/'")), if_true=Block(statements=[MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this')]), if_false=None), Break(label=None)]))]))])), IfThenElse(predicate=Equality(operator='==', lhs=MethodInvocation(name='length', arguments=[], type_arguments=[], target=Name(value='buf')), rhs=Literal(value='0')), if_true=Block(statements=[While(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'/'")), body=Block(statements=[IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="'!'")), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'-'")), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='"Comment or Element"')], type_arguments=[], target='this'))]), if_false=None), Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'-'")), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='"Comment or Element"')], type_arguments=[], target='this'))]), if_false=None), MethodInvocation(name='skipComment', arguments=[], type_arguments=[], target='this')]), if_false=Block(statements=[MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this'), VariableDeclaration(type=Type(name=Name(value='XMLElement'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='child', dimensions=0), initializer=MethodInvocation(name='createElement', arguments=[], type_arguments=[], target='this'))], modifiers=[]), MethodInvocation(name='scanElement', arguments=[Name(value='child')], type_arguments=[], target='this'), MethodInvocation(name='addChild', arguments=[Name(value='child')], type_arguments=[], target=Name(value='elt'))])), Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='scanWhitespace', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'<'")), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='"<"')], type_arguments=[], target='this'))]), if_false=None), Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this'))])), MethodInvocation(name='unreadChar', arguments=[Name(value='ch')], type_arguments=[], target='this')]), if_false=Block(statements=[IfThenElse(predicate=FieldAccess(name='ignoreWhitespace', target='this'), if_true=Block(statements=[MethodInvocation(name='setContent', arguments=[MethodInvocation(name='trim', arguments=[], type_arguments=[], target=MethodInvocation(name='toString', arguments=[], type_arguments=[], target=Name(value='buf')))], type_arguments=[], target=Name(value='elt'))]), if_false=Block(statements=[MethodInvocation(name='setContent', arguments=[MethodInvocation(name='toString', arguments=[], type_arguments=[], target=Name(value='buf'))], type_arguments=[], target=Name(value='elt'))]))])), Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='!=', lhs=Name(value='ch'), rhs=Literal(value="'/'")), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='"/"')], type_arguments=[], target='this'))]), if_false=None), MethodInvocation(name='unreadChar', arguments=[MethodInvocation(name='scanWhitespace', arguments=[], type_arguments=[], target='this')], type_arguments=[], target='this'), IfThenElse(predicate=Unary(sign='!', expression=MethodInvocation(name='checkLiteral', arguments=[Name(value='name')], type_arguments=[], target='this')), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Name(value='name')], type_arguments=[], target='this'))]), if_false=None), IfThenElse(predicate=Equality(operator='!=', lhs=MethodInvocation(name='scanWhitespace', arguments=[], type_arguments=[], target='this'), rhs=Literal(value="'>'")), if_true=Block(statements=[Throw(exception=MethodInvocation(name='expectedInput', arguments=[Literal(value='">"')], type_arguments=[], target='this'))]), if_false=None)], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='resolveEntity', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='buf', dimensions=0), type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[VariableDeclaration(type='char', variable_declarators=[VariableDeclarator(variable=Variable(name='ch', dimensions=0), initializer=Literal(value="'\\0'"))], modifiers=[]), VariableDeclaration(type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='keyBuf', dimensions=0), initializer=InstanceCreation(type=Type(name=Name(value='StringBuffer'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[], body=[], enclosed_in=None))], modifiers=[]), For(init=None, predicate=None, update=None, body=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=MethodInvocation(name='readChar', arguments=[], type_arguments=[], target='this')), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='ch'), rhs=Literal(value="';'")), if_true=Block(statements=[Break(label=None)]), if_false=None), MethodInvocation(name='append', arguments=[Name(value='ch')], type_arguments=[], target=Name(value='keyBuf'))])), VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='key', dimensions=0), initializer=MethodInvocation(name='toString', arguments=[], type_arguments=[], target=Name(value='keyBuf')))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=MethodInvocation(name='charAt', arguments=[Literal(value='0')], type_arguments=[], target=Name(value='key')), rhs=Literal(value="'#'")), if_true=Block(statements=[Try(block=Block(statements=[IfThenElse(predicate=Equality(operator='==', lhs=MethodInvocation(name='charAt', arguments=[Literal(value='1')], type_arguments=[], target=Name(value='key')), rhs=Literal(value="'x'")), if_true=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=Cast(target=Type(name='char', type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='parseInt', arguments=[MethodInvocation(name='substring', arguments=[Literal(value='2')], type_arguments=[], target=Name(value='key')), Literal(value='16')], type_arguments=[], target=Name(value='Integer'))))]), if_false=Block(statements=[Assignment(operator='=', lhs=Name(value='ch'), rhs=Cast(target=Type(name='char', type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='parseInt', arguments=[MethodInvocation(name='substring', arguments=[Literal(value='1')], type_arguments=[], target=Name(value='key')), Literal(value='10')], type_arguments=[], target=Name(value='Integer'))))]))]), catches=[Catch(variable=Variable(name='e', dimensions=0), modifiers=[], types=[Type(name=Name(value='NumberFormatException'), type_arguments=[], enclosed_in=None, dimensions=0)], block=Block(statements=[Throw(exception=MethodInvocation(name='unknownEntity', arguments=[Name(value='key')], type_arguments=[], target='this'))]))], _finally=None, resources=[]), MethodInvocation(name='append', arguments=[Name(value='ch')], type_arguments=[], target=Name(value='buf'))]), if_false=Block(statements=[VariableDeclaration(type=Type(name='char', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='value', dimensions=0), initializer=Cast(target=Type(name='char', type_arguments=[], enclosed_in=None, dimensions=1), expression=MethodInvocation(name='get', arguments=[Name(value='key')], type_arguments=[], target=FieldAccess(name='entities', target='this'))))], modifiers=[]), IfThenElse(predicate=Equality(operator='==', lhs=Name(value='value'), rhs=Literal(value='null')), if_true=Block(statements=[Throw(exception=MethodInvocation(name='unknownEntity', arguments=[Name(value='key')], type_arguments=[], target='this'))]), if_false=None), MethodInvocation(name='append', arguments=[Name(value='value')], type_arguments=[], target=Name(value='buf'))]))], abstract=False, extended_dims=0, throws=Throws(types=[Type(name=Name(value='IOException'), type_arguments=[], enclosed_in=None, dimensions=0)])), MethodDeclaration(name='unreadChar', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='ch', dimensions=0), type='char', modifiers=[], vararg=False)], return_type='void', body=[Assignment(operator='=', lhs=FieldAccess(name='charReadTooMuch', target='this'), rhs=Name(value='ch'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='invalidValueSet', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='msg', dimensions=0), initializer=Additive(operator='+', lhs=Additive(operator='+', lhs=Literal(value='"Invalid value set (entity name = \\""'), rhs=Name(value='name')), rhs=Literal(value='"\\")"')))], modifiers=[]), Return(result=InstanceCreation(type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[MethodInvocation(name='getName', arguments=[], type_arguments=[], target='this'), FieldAccess(name='parserLineNr', target='this'), Name(value='msg')], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='invalidValue', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='value', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='msg', dimensions=0), initializer=Additive(operator='+', lhs=Additive(operator='+', lhs=Additive(operator='+', lhs=Additive(operator='+', lhs=Additive(operator='+', lhs=Literal(value='"Attribute \\""'), rhs=Name(value='name')), rhs=Literal(value='"\\" does not contain a valid "')), rhs=Literal(value='"value (\\""')), rhs=Name(value='value')), rhs=Literal(value='"\\")"')))], modifiers=[]), Return(result=InstanceCreation(type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[MethodInvocation(name='getName', arguments=[], type_arguments=[], target='this'), FieldAccess(name='parserLineNr', target='this'), Name(value='msg')], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='unexpectedEndOfData', modifiers=['protected'], type_parameters=[], parameters=[], return_type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='msg', dimensions=0), initializer=Literal(value='"Unexpected end of data reached"'))], modifiers=[]), Return(result=InstanceCreation(type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[MethodInvocation(name='getName', arguments=[], type_arguments=[], target='this'), FieldAccess(name='parserLineNr', target='this'), Name(value='msg')], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='syntaxError', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='context', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='msg', dimensions=0), initializer=Additive(operator='+', lhs=Literal(value='"Syntax error while parsing "'), rhs=Name(value='context')))], modifiers=[]), Return(result=InstanceCreation(type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[MethodInvocation(name='getName', arguments=[], type_arguments=[], target='this'), FieldAccess(name='parserLineNr', target='this'), Name(value='msg')], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='expectedInput', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='charSet', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='msg', dimensions=0), initializer=Additive(operator='+', lhs=Literal(value='"Expected: "'), rhs=Name(value='charSet')))], modifiers=[]), Return(result=InstanceCreation(type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[MethodInvocation(name='getName', arguments=[], type_arguments=[], target='this'), FieldAccess(name='parserLineNr', target='this'), Name(value='msg')], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='unknownEntity', modifiers=['protected'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='name', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='msg', dimensions=0), initializer=Additive(operator='+', lhs=Additive(operator='+', lhs=Literal(value='"Unknown or invalid entity: &"'), rhs=Name(value='name')), rhs=Literal(value='";"')))], modifiers=[]), Return(result=InstanceCreation(type=Type(name=Name(value='XMLParseException'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[MethodInvocation(name='getName', arguments=[], type_arguments=[], target='this'), FieldAccess(name='parserLineNr', target='this'), Name(value='msg')], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None)]
