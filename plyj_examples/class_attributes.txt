starting tests
---

Test: ./../tests/proj1
----------
Test: ./../tests/proj2
===packages===
PackageDeclaration(name=Name(value='com.example.android.wearable.watchface'), modifiers=[])
===imports===
[ImportDeclaration(name=Name(value='android.content.BroadcastReceiver'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.content.Context'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.content.Intent'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.content.IntentFilter'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.opengl.GLES20'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.opengl.Matrix'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.support.wearable.watchface.Gles2WatchFaceService'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.support.wearable.watchface.WatchFaceStyle'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.util.Log'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.view.Gravity'), static=False, on_demand=False), ImportDeclaration(name=Name(value='android.view.SurfaceHolder'), static=False, on_demand=False), ImportDeclaration(name=Name(value='java.util.Calendar'), static=False, on_demand=False), ImportDeclaration(name=Name(value='java.util.TimeZone'), static=False, on_demand=False), ImportDeclaration(name=Name(value='java.util.concurrent.TimeUnit'), static=False, on_demand=False)]
===list of declared types===
['name', 'body', 'modifiers', 'type_parameters', 'extends', 'implements']
FieldDeclaration(type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='TAG', dimensions=0), initializer=Literal(value='"OpenGLWatchFaceService"'))], modifiers=['private', 'static', 'final'])
FieldDeclaration(type='long', variable_declarators=[VariableDeclarator(variable=Variable(name='FPS', dimensions=0), initializer=Literal(value='60'))], modifiers=['private', 'static', 'final'])
FieldDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='EYE_Z', dimensions=0), initializer=Unary(sign='-', expression=Literal(value='2.3f')))], modifiers=['private', 'static', 'final'])
FieldDeclaration(type='long', variable_declarators=[VariableDeclarator(variable=Variable(name='FRAME_PERIOD_MS', dimensions=0), initializer=Multiplicative(operator='/', lhs=MethodInvocation(name='toMillis', arguments=[Literal(value='1')], type_arguments=[], target=Name(value='TimeUnit.SECONDS')), rhs=Name(value='FPS')))], modifiers=['private', 'static', 'final'])
MethodDeclaration(name='onCreateEngine', modifiers=[Annotation(name=Name(value='Override'), members=[], single_member=None), 'public'], type_parameters=[], parameters=[], return_type=Type(name=Name(value='Engine'), type_arguments=[], enclosed_in=None, dimensions=0), body=[Return(result=InstanceCreation(type=Type(name=Name(value='Engine'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None)
ClassDeclaration(name='Engine', body=[FieldDeclaration(type='long', variable_declarators=[VariableDeclarator(variable=Variable(name='CYCLE_PERIOD_SECONDS', dimensions=0), initializer=Literal(value='5'))], modifiers=['private', 'static', 'final']), FieldDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='mNumCameraAngles', dimensions=0), initializer=Cast(target=Type(name='int', type_arguments=[], enclosed_in=None, dimensions=0), expression=Multiplicative(operator='*', lhs=Name(value='CYCLE_PERIOD_SECONDS'), rhs=Name(value='FPS'))))], modifiers=['private', 'final']), FieldDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='mProjectionMatrix', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[Literal(value='16')], initializer=None))], modifiers=['private', 'final']), FieldDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=2), variable_declarators=[VariableDeclarator(variable=Variable(name='mViewMatrices', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[Name(value='mNumCameraAngles'), Literal(value='16')], initializer=None))], modifiers=['private', 'final']), FieldDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='mAmbientViewMatrix', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[Literal(value='16')], initializer=None))], modifiers=['private', 'final']), FieldDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=2), variable_declarators=[VariableDeclarator(variable=Variable(name='mModelMatrices', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[Literal(value='360'), Literal(value='16')], initializer=None))], modifiers=['private', 'final']), FieldDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=2), variable_declarators=[VariableDeclarator(variable=Variable(name='mVpMatrices', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[Name(value='mNumCameraAngles'), Literal(value='16')], initializer=None))], modifiers=['private', 'final']), FieldDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='mAmbientVpMatrix', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[Literal(value='16')], initializer=None))], modifiers=['private', 'final']), FieldDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='mMvpMatrix', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[Literal(value='16')], initializer=None))], modifiers=['private', 'final']), FieldDeclaration(type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='mMajorTickTriangles', dimensions=0), initializer=None)], modifiers=['private']), FieldDeclaration(type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='mMinorTickTriangles', dimensions=0), initializer=None)], modifiers=['private']), FieldDeclaration(type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='mSecondHandTriangle', dimensions=0), initializer=None)], modifiers=['private']), FieldDeclaration(type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='mMinuteHandTriangle', dimensions=0), initializer=None)], modifiers=['private']), FieldDeclaration(type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='mHourHandTriangle', dimensions=0), initializer=None)], modifiers=['private']), FieldDeclaration(type=Type(name=Name(value='Calendar'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='mCalendar', dimensions=0), initializer=MethodInvocation(name='getInstance', arguments=[], type_arguments=[], target=Name(value='Calendar')))], modifiers=['private']), FieldDeclaration(type='boolean', variable_declarators=[VariableDeclarator(variable=Variable(name='mRegisteredTimeZoneReceiver', dimensions=0), initializer=None)], modifiers=['private']), FieldDeclaration(type=Type(name=Name(value='BroadcastReceiver'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='mTimeZoneReceiver', dimensions=0), initializer=InstanceCreation(type=Type(name=Name(value='BroadcastReceiver'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[], body=[MethodDeclaration(name='onReceive', modifiers=[Annotation(name=Name(value='Override'), members=[], single_member=None), 'public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='context', dimensions=0), type=Type(name=Name(value='Context'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='intent', dimensions=0), type=Type(name=Name(value='Intent'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[MethodInvocation(name='setTimeZone', arguments=[MethodInvocation(name='getDefault', arguments=[], type_arguments=[], target=Name(value='TimeZone'))], type_arguments=[], target=Name(value='mCalendar')), MethodInvocation(name='invalidate', arguments=[], type_arguments=[], target=None)], abstract=False, extended_dims=0, throws=None)], enclosed_in=None))], modifiers=['private', 'final']), MethodDeclaration(name='onCreate', modifiers=[Annotation(name=Name(value='Override'), members=[], single_member=None), 'public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='surfaceHolder', dimensions=0), type=Type(name=Name(value='SurfaceHolder'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type='void', body=[IfThenElse(predicate=MethodInvocation(name='isLoggable', arguments=[Name(value='TAG'), Name(value='Log.DEBUG')], type_arguments=[], target=Name(value='Log')), if_true=Block(statements=[MethodInvocation(name='d', arguments=[Name(value='TAG'), Literal(value='"onCreate"')], type_arguments=[], target=Name(value='Log'))]), if_false=None), MethodInvocation(name='onCreate', arguments=[Name(value='surfaceHolder')], type_arguments=[], target='super'), MethodInvocation(name='setWatchFaceStyle', arguments=[MethodInvocation(name='build', arguments=[], type_arguments=[], target=MethodInvocation(name='setShowSystemUiTime', arguments=[Literal(value='false')], type_arguments=[], target=MethodInvocation(name='setHotwordIndicatorGravity', arguments=[Or(operator='|', lhs=Name(value='Gravity.LEFT'), rhs=Name(value='Gravity.TOP'))], type_arguments=[], target=MethodInvocation(name='setStatusBarGravity', arguments=[Or(operator='|', lhs=Name(value='Gravity.RIGHT'), rhs=Name(value='Gravity.TOP'))], type_arguments=[], target=MethodInvocation(name='setBackgroundVisibility', arguments=[Name(value='WatchFaceStyle.BACKGROUND_VISIBILITY_INTERRUPTIVE')], type_arguments=[], target=MethodInvocation(name='setCardPeekMode', arguments=[Name(value='WatchFaceStyle.PEEK_MODE_SHORT')], type_arguments=[], target=InstanceCreation(type=Type(name=Name(value='WatchFaceStyle.Builder'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[Name(value='OpenGLWatchFaceService.this')], body=[], enclosed_in=None)))))))], type_arguments=[], target=None)], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='onGlContextCreated', modifiers=[Annotation(name=Name(value='Override'), members=[], single_member=None), 'public'], type_parameters=[], parameters=[], return_type='void', body=[IfThenElse(predicate=MethodInvocation(name='isLoggable', arguments=[Name(value='TAG'), Name(value='Log.DEBUG')], type_arguments=[], target=Name(value='Log')), if_true=Block(statements=[MethodInvocation(name='d', arguments=[Name(value='TAG'), Literal(value='"onGlContextCreated"')], type_arguments=[], target=Name(value='Log'))]), if_false=None), MethodInvocation(name='onGlContextCreated', arguments=[], type_arguments=[], target='super'), VariableDeclaration(type=Type(name=Name(value='Gles2ColoredTriangleList.Program'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='triangleProgram', dimensions=0), initializer=InstanceCreation(type=Type(name=Name(value='Gles2ColoredTriangleList.Program'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[], body=[], enclosed_in=None))], modifiers=[]), MethodInvocation(name='use', arguments=[], type_arguments=[], target=Name(value='triangleProgram')), Assignment(operator='=', lhs=Name(value='mMajorTickTriangles'), rhs=MethodInvocation(name='createMajorTicks', arguments=[Name(value='triangleProgram')], type_arguments=[], target=None)), Assignment(operator='=', lhs=Name(value='mMinorTickTriangles'), rhs=MethodInvocation(name='createMinorTicks', arguments=[Name(value='triangleProgram')], type_arguments=[], target=None)), Assignment(operator='=', lhs=Name(value='mSecondHandTriangle'), rhs=MethodInvocation(name='createHand', arguments=[Name(value='triangleProgram'), Literal(value='0.02f'), Literal(value='1.0f'), ArrayCreation(type='float', dimensions=[None], initializer=ArrayInitializer(elements=[Literal(value='1.0f'), Literal(value='0.0f'), Literal(value='0.0f'), Literal(value='1.0f')]))], type_arguments=[], target=None)), Assignment(operator='=', lhs=Name(value='mMinuteHandTriangle'), rhs=MethodInvocation(name='createHand', arguments=[Name(value='triangleProgram'), Literal(value='0.06f'), Literal(value='1f'), ArrayCreation(type='float', dimensions=[None], initializer=ArrayInitializer(elements=[Literal(value='0.7f'), Literal(value='0.7f'), Literal(value='0.7f'), Literal(value='1.0f')]))], type_arguments=[], target=None)), Assignment(operator='=', lhs=Name(value='mHourHandTriangle'), rhs=MethodInvocation(name='createHand', arguments=[Name(value='triangleProgram'), Literal(value='0.1f'), Literal(value='0.6f'), ArrayCreation(type='float', dimensions=[None], initializer=ArrayInitializer(elements=[Literal(value='0.9f'), Literal(value='0.9f'), Literal(value='0.9f'), Literal(value='1.0f')]))], type_arguments=[], target=None)), For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Name(value='mModelMatrices.length')), update=[Unary(sign='++x', expression=Name(value='i'))], body=Block(statements=[MethodInvocation(name='setRotateM', arguments=[ArrayAccess(index=Name(value='i'), target=Name(value='mModelMatrices')), Literal(value='0'), Name(value='i'), Literal(value='0'), Literal(value='0'), Literal(value='1')], type_arguments=[], target=Name(value='Matrix'))])), For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Name(value='mNumCameraAngles')), update=[Unary(sign='++x', expression=Name(value='i'))], body=Block(statements=[VariableDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='cameraAngle', dimensions=0), initializer=Cast(target=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=0), expression=Multiplicative(operator='*', lhs=Multiplicative(operator='*', lhs=Multiplicative(operator='/', lhs=Cast(target=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='i')), rhs=Name(value='mNumCameraAngles')), rhs=Literal(value='2')), rhs=Name(value='Math.PI'))))], modifiers=['final']), VariableDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='eyeX', dimensions=0), initializer=Cast(target=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='cos', arguments=[Name(value='cameraAngle')], type_arguments=[], target=Name(value='Math'))))], modifiers=['final']), VariableDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='eyeY', dimensions=0), initializer=Cast(target=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=0), expression=MethodInvocation(name='sin', arguments=[Name(value='cameraAngle')], type_arguments=[], target=Name(value='Math'))))], modifiers=['final']), MethodInvocation(name='setLookAtM', arguments=[ArrayAccess(index=Name(value='i'), target=Name(value='mViewMatrices')), Literal(value='0'), Name(value='eyeX'), Name(value='eyeY'), Name(value='EYE_Z'), Literal(value='0'), Literal(value='0'), Literal(value='0'), Literal(value='0'), Literal(value='1'), Literal(value='0')], type_arguments=[], target=Name(value='Matrix'))])), MethodInvocation(name='setLookAtM', arguments=[Name(value='mAmbientViewMatrix'), Literal(value='0'), Literal(value='0'), Literal(value='0'), Name(value='EYE_Z'), Literal(value='0'), Literal(value='0'), Literal(value='0'), Literal(value='0'), Literal(value='1'), Literal(value='0')], type_arguments=[], target=Name(value='Matrix'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='onGlSurfaceCreated', modifiers=[Annotation(name=Name(value='Override'), members=[], single_member=None), 'public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='width', dimensions=0), type='int', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='height', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[IfThenElse(predicate=MethodInvocation(name='isLoggable', arguments=[Name(value='TAG'), Name(value='Log.DEBUG')], type_arguments=[], target=Name(value='Log')), if_true=Block(statements=[MethodInvocation(name='d', arguments=[Name(value='TAG'), Additive(operator='+', lhs=Additive(operator='+', lhs=Additive(operator='+', lhs=Literal(value='"onGlSurfaceCreated: "'), rhs=Name(value='width')), rhs=Literal(value='" x "')), rhs=Name(value='height'))], type_arguments=[], target=Name(value='Log'))]), if_false=None), MethodInvocation(name='onGlSurfaceCreated', arguments=[Name(value='width'), Name(value='height')], type_arguments=[], target='super'), VariableDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='aspectRatio', dimensions=0), initializer=Multiplicative(operator='/', lhs=Cast(target=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=0), expression=Name(value='width')), rhs=Name(value='height')))], modifiers=['final']), MethodInvocation(name='frustumM', arguments=[Name(value='mProjectionMatrix'), Literal(value='0'), Unary(sign='-', expression=Name(value='aspectRatio')), Name(value='aspectRatio'), Unary(sign='-', expression=Literal(value='1')), Literal(value='1'), Literal(value='2'), Literal(value='7')], type_arguments=[], target=Name(value='Matrix')), For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Name(value='mNumCameraAngles')), update=[Unary(sign='++x', expression=Name(value='i'))], body=Block(statements=[MethodInvocation(name='multiplyMM', arguments=[ArrayAccess(index=Name(value='i'), target=Name(value='mVpMatrices')), Literal(value='0'), Name(value='mProjectionMatrix'), Literal(value='0'), ArrayAccess(index=Name(value='i'), target=Name(value='mViewMatrices')), Literal(value='0')], type_arguments=[], target=Name(value='Matrix'))])), MethodInvocation(name='multiplyMM', arguments=[Name(value='mAmbientVpMatrix'), Literal(value='0'), Name(value='mProjectionMatrix'), Literal(value='0'), Name(value='mAmbientViewMatrix'), Literal(value='0')], type_arguments=[], target=Name(value='Matrix'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='createHand', modifiers=['private'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='program', dimensions=0), type=Type(name=Name(value='Gles2ColoredTriangleList.Program'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='width', dimensions=0), type='float', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='length', dimensions=0), type='float', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='color', dimensions=0), type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), modifiers=[], vararg=False)], return_type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='triangleCoords', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[None], initializer=ArrayInitializer(elements=[Literal(value='0'), Name(value='length'), Literal(value='0'), Multiplicative(operator='/', lhs=Unary(sign='-', expression=Name(value='width')), rhs=Literal(value='2')), Literal(value='0'), Literal(value='0'), Multiplicative(operator='/', lhs=Name(value='width'), rhs=Literal(value='2')), Literal(value='0'), Literal(value='0')])))], modifiers=[]), Return(result=InstanceCreation(type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[Name(value='program'), Name(value='triangleCoords'), Name(value='color')], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='createMajorTicks', modifiers=['private'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='program', dimensions=0), type=Type(name=Name(value='Gles2ColoredTriangleList.Program'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='trianglesCoords', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[Multiplicative(operator='*', lhs=Literal(value='9'), rhs=Literal(value='4'))], initializer=None))], modifiers=[]), For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Literal(value='4')), update=[Unary(sign='x++', expression=Name(value='i'))], body=Block(statements=[VariableDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='triangleCoords', dimensions=0), initializer=MethodInvocation(name='getMajorTickTriangleCoords', arguments=[Name(value='i')], type_arguments=[], target=None))], modifiers=[]), MethodInvocation(name='arraycopy', arguments=[Name(value='triangleCoords'), Literal(value='0'), Name(value='trianglesCoords'), Multiplicative(operator='*', lhs=Name(value='i'), rhs=Literal(value='9')), Name(value='triangleCoords.length')], type_arguments=[], target=Name(value='System'))])), Return(result=InstanceCreation(type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[Name(value='program'), Name(value='trianglesCoords'), ArrayCreation(type='float', dimensions=[None], initializer=ArrayInitializer(elements=[Literal(value='1.0f'), Literal(value='1.0f'), Literal(value='1.0f'), Literal(value='1.0f')]))], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='createMinorTicks', modifiers=['private'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='program', dimensions=0), type=Type(name=Name(value='Gles2ColoredTriangleList.Program'), type_arguments=[], enclosed_in=None, dimensions=0), modifiers=[], vararg=False)], return_type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), body=[VariableDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='trianglesCoords', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[Multiplicative(operator='*', lhs=Literal(value='9'), rhs=Additive(operator='-', lhs=Literal(value='12'), rhs=Literal(value='4')))], initializer=None))], modifiers=[]), VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='index', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Literal(value='12')), update=[Unary(sign='x++', expression=Name(value='i'))], body=Block(statements=[IfThenElse(predicate=Equality(operator='==', lhs=Multiplicative(operator='%', lhs=Name(value='i'), rhs=Literal(value='3')), rhs=Literal(value='0')), if_true=Block(statements=[Continue(label=None)]), if_false=None), VariableDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='triangleCoords', dimensions=0), initializer=MethodInvocation(name='getMinorTickTriangleCoords', arguments=[Name(value='i')], type_arguments=[], target=None))], modifiers=[]), MethodInvocation(name='arraycopy', arguments=[Name(value='triangleCoords'), Literal(value='0'), Name(value='trianglesCoords'), Name(value='index'), Name(value='triangleCoords.length')], type_arguments=[], target=Name(value='System')), Assignment(operator='+=', lhs=Name(value='index'), rhs=Literal(value='9'))])), Return(result=InstanceCreation(type=Type(name=Name(value='Gles2ColoredTriangleList'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[Name(value='program'), Name(value='trianglesCoords'), ArrayCreation(type='float', dimensions=[None], initializer=ArrayInitializer(elements=[Literal(value='0.5f'), Literal(value='0.5f'), Literal(value='0.5f'), Literal(value='1.0f')]))], body=[], enclosed_in=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getMajorTickTriangleCoords', modifiers=['private'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='index', dimensions=0), type='int', modifiers=[], vararg=False)], return_type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), body=[Return(result=MethodInvocation(name='getTickTriangleCoords', arguments=[Literal(value='0.03f'), Literal(value='0.09f'), Multiplicative(operator='/', lhs=Multiplicative(operator='*', lhs=Name(value='index'), rhs=Literal(value='360')), rhs=Literal(value='4'))], type_arguments=[], target=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getMinorTickTriangleCoords', modifiers=['private'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='index', dimensions=0), type='int', modifiers=[], vararg=False)], return_type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), body=[Return(result=MethodInvocation(name='getTickTriangleCoords', arguments=[Literal(value='0.02f'), Literal(value='0.06f'), Multiplicative(operator='/', lhs=Multiplicative(operator='*', lhs=Name(value='index'), rhs=Literal(value='360')), rhs=Literal(value='12'))], type_arguments=[], target=None))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='getTickTriangleCoords', modifiers=['private'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='width', dimensions=0), type='float', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='length', dimensions=0), type='float', modifiers=[], vararg=False), FormalParameter(variable=Variable(name='angleDegrees', dimensions=0), type='int', modifiers=[], vararg=False)], return_type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), body=[VariableDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='coords', dimensions=0), initializer=ArrayCreation(type='float', dimensions=[None], initializer=ArrayInitializer(elements=[Literal(value='0'), Literal(value='1'), Literal(value='0'), Multiplicative(operator='/', lhs=Name(value='width'), rhs=Literal(value='2')), Additive(operator='+', lhs=Name(value='length'), rhs=Literal(value='1')), Literal(value='0'), Multiplicative(operator='/', lhs=Unary(sign='-', expression=Name(value='width')), rhs=Literal(value='2')), Additive(operator='+', lhs=Name(value='length'), rhs=Literal(value='1')), Literal(value='0')])))], modifiers=[]), MethodInvocation(name='rotateCoords', arguments=[Name(value='coords'), Name(value='angleDegrees')], type_arguments=[], target=None), Return(result=Name(value='coords'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='rotateCoords', modifiers=['private'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='coords', dimensions=0), type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), modifiers=[], vararg=False), FormalParameter(variable=Variable(name='angleDegrees', dimensions=0), type='int', modifiers=[], vararg=False)], return_type='void', body=[VariableDeclaration(type='double', variable_declarators=[VariableDeclarator(variable=Variable(name='angleRadians', dimensions=0), initializer=MethodInvocation(name='toRadians', arguments=[Name(value='angleDegrees')], type_arguments=[], target=Name(value='Math')))], modifiers=[]), VariableDeclaration(type='double', variable_declarators=[VariableDeclarator(variable=Variable(name='cos', dimensions=0), initializer=MethodInvocation(name='cos', arguments=[Name(value='angleRadians')], type_arguments=[], target=Name(value='Math')))], modifiers=[]), VariableDeclaration(type='double', variable_declarators=[VariableDeclarator(variable=Variable(name='sin', dimensions=0), initializer=MethodInvocation(name='sin', arguments=[Name(value='angleRadians')], type_arguments=[], target=Name(value='Math')))], modifiers=[]), For(init=VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='i', dimensions=0), initializer=Literal(value='0'))], modifiers=[]), predicate=Relational(operator='<', lhs=Name(value='i'), rhs=Name(value='coords.length')), update=[Assignment(operator='+=', lhs=Name(value='i'), rhs=Literal(value='3'))], body=Block(statements=[VariableDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='x', dimensions=0), initializer=ArrayAccess(index=Name(value='i'), target=Name(value='coords')))], modifiers=[]), VariableDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='y', dimensions=0), initializer=ArrayAccess(index=Additive(operator='+', lhs=Name(value='i'), rhs=Literal(value='1')), target=Name(value='coords')))], modifiers=[]), Assignment(operator='=', lhs=ArrayAccess(index=Name(value='i'), target=Name(value='coords')), rhs=Cast(target=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=0), expression=Additive(operator='-', lhs=Multiplicative(operator='*', lhs=Name(value='cos'), rhs=Name(value='x')), rhs=Multiplicative(operator='*', lhs=Name(value='sin'), rhs=Name(value='y'))))), Assignment(operator='=', lhs=ArrayAccess(index=Additive(operator='+', lhs=Name(value='i'), rhs=Literal(value='1')), target=Name(value='coords')), rhs=Cast(target=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=0), expression=Additive(operator='+', lhs=Multiplicative(operator='*', lhs=Name(value='sin'), rhs=Name(value='x')), rhs=Multiplicative(operator='*', lhs=Name(value='cos'), rhs=Name(value='y')))))]))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='onAmbientModeChanged', modifiers=[Annotation(name=Name(value='Override'), members=[], single_member=None), 'public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='inAmbientMode', dimensions=0), type='boolean', modifiers=[], vararg=False)], return_type='void', body=[IfThenElse(predicate=MethodInvocation(name='isLoggable', arguments=[Name(value='TAG'), Name(value='Log.DEBUG')], type_arguments=[], target=Name(value='Log')), if_true=Block(statements=[MethodInvocation(name='d', arguments=[Name(value='TAG'), Additive(operator='+', lhs=Literal(value='"onAmbientModeChanged: "'), rhs=Name(value='inAmbientMode'))], type_arguments=[], target=Name(value='Log'))]), if_false=None), MethodInvocation(name='onAmbientModeChanged', arguments=[Name(value='inAmbientMode')], type_arguments=[], target='super'), MethodInvocation(name='invalidate', arguments=[], type_arguments=[], target=None)], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='onVisibilityChanged', modifiers=[Annotation(name=Name(value='Override'), members=[], single_member=None), 'public'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='visible', dimensions=0), type='boolean', modifiers=[], vararg=False)], return_type='void', body=[IfThenElse(predicate=MethodInvocation(name='isLoggable', arguments=[Name(value='TAG'), Name(value='Log.DEBUG')], type_arguments=[], target=Name(value='Log')), if_true=Block(statements=[MethodInvocation(name='d', arguments=[Name(value='TAG'), Additive(operator='+', lhs=Literal(value='"onVisibilityChanged: "'), rhs=Name(value='visible'))], type_arguments=[], target=Name(value='Log'))]), if_false=None), MethodInvocation(name='onVisibilityChanged', arguments=[Name(value='visible')], type_arguments=[], target='super'), IfThenElse(predicate=Name(value='visible'), if_true=Block(statements=[MethodInvocation(name='registerReceiver', arguments=[], type_arguments=[], target=None), MethodInvocation(name='setTimeZone', arguments=[MethodInvocation(name='getDefault', arguments=[], type_arguments=[], target=Name(value='TimeZone'))], type_arguments=[], target=Name(value='mCalendar')), MethodInvocation(name='invalidate', arguments=[], type_arguments=[], target=None)]), if_false=Block(statements=[MethodInvocation(name='unregisterReceiver', arguments=[], type_arguments=[], target=None)]))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='registerReceiver', modifiers=['private'], type_parameters=[], parameters=[], return_type='void', body=[IfThenElse(predicate=Name(value='mRegisteredTimeZoneReceiver'), if_true=Block(statements=[Return(result=None)]), if_false=None), Assignment(operator='=', lhs=Name(value='mRegisteredTimeZoneReceiver'), rhs=Literal(value='true')), VariableDeclaration(type=Type(name=Name(value='IntentFilter'), type_arguments=[], enclosed_in=None, dimensions=0), variable_declarators=[VariableDeclarator(variable=Variable(name='filter', dimensions=0), initializer=InstanceCreation(type=Type(name=Name(value='IntentFilter'), type_arguments=[], enclosed_in=None, dimensions=0), type_arguments=[], arguments=[Name(value='Intent.ACTION_TIMEZONE_CHANGED')], body=[], enclosed_in=None))], modifiers=[]), MethodInvocation(name='registerReceiver', arguments=[Name(value='mTimeZoneReceiver'), Name(value='filter')], type_arguments=[], target=Name(value='OpenGLWatchFaceService.this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='unregisterReceiver', modifiers=['private'], type_parameters=[], parameters=[], return_type='void', body=[IfThenElse(predicate=Unary(sign='!', expression=Name(value='mRegisteredTimeZoneReceiver')), if_true=Block(statements=[Return(result=None)]), if_false=None), Assignment(operator='=', lhs=Name(value='mRegisteredTimeZoneReceiver'), rhs=Literal(value='false')), MethodInvocation(name='unregisterReceiver', arguments=[Name(value='mTimeZoneReceiver')], type_arguments=[], target=Name(value='OpenGLWatchFaceService.this'))], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='onTimeTick', modifiers=[Annotation(name=Name(value='Override'), members=[], single_member=None), 'public'], type_parameters=[], parameters=[], return_type='void', body=[MethodInvocation(name='onTimeTick', arguments=[], type_arguments=[], target='super'), IfThenElse(predicate=MethodInvocation(name='isLoggable', arguments=[Name(value='TAG'), Name(value='Log.DEBUG')], type_arguments=[], target=Name(value='Log')), if_true=Block(statements=[MethodInvocation(name='d', arguments=[Name(value='TAG'), Additive(operator='+', lhs=Literal(value='"onTimeTick: ambient = "'), rhs=MethodInvocation(name='isInAmbientMode', arguments=[], type_arguments=[], target=None))], type_arguments=[], target=Name(value='Log'))]), if_false=None), MethodInvocation(name='invalidate', arguments=[], type_arguments=[], target=None)], abstract=False, extended_dims=0, throws=None), MethodDeclaration(name='onDraw', modifiers=[Annotation(name=Name(value='Override'), members=[], single_member=None), 'public'], type_parameters=[], parameters=[], return_type='void', body=[IfThenElse(predicate=MethodInvocation(name='isLoggable', arguments=[Name(value='TAG'), Name(value='Log.VERBOSE')], type_arguments=[], target=Name(value='Log')), if_true=Block(statements=[MethodInvocation(name='v', arguments=[Name(value='TAG'), Literal(value='"onDraw"')], type_arguments=[], target=Name(value='Log'))]), if_false=None), MethodInvocation(name='onDraw', arguments=[], type_arguments=[], target='super'), VariableDeclaration(type=Type(name='float', type_arguments=[], enclosed_in=None, dimensions=1), variable_declarators=[VariableDeclarator(variable=Variable(name='vpMatrix', dimensions=0), initializer=None)], modifiers=['final']), IfThenElse(predicate=MethodInvocation(name='isInAmbientMode', arguments=[], type_arguments=[], target=None), if_true=Block(statements=[MethodInvocation(name='glClearColor', arguments=[Literal(value='0'), Literal(value='0'), Literal(value='0'), Literal(value='1')], type_arguments=[], target=Name(value='GLES20')), Assignment(operator='=', lhs=Name(value='vpMatrix'), rhs=Name(value='mAmbientVpMatrix'))]), if_false=Block(statements=[MethodInvocation(name='glClearColor', arguments=[Literal(value='0.5f'), Literal(value='0.2f'), Literal(value='0.2f'), Literal(value='1')], type_arguments=[], target=Name(value='GLES20')), VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='cameraIndex', dimensions=0), initializer=Cast(target=Type(name='int', type_arguments=[], enclosed_in=None, dimensions=0), expression=Multiplicative(operator='%', lhs=Multiplicative(operator='/', lhs=MethodInvocation(name='currentTimeMillis', arguments=[], type_arguments=[], target=Name(value='System')), rhs=Name(value='FRAME_PERIOD_MS')), rhs=Name(value='mNumCameraAngles'))))], modifiers=['final']), Assignment(operator='=', lhs=Name(value='vpMatrix'), rhs=ArrayAccess(index=Name(value='cameraIndex'), target=Name(value='mVpMatrices')))])), MethodInvocation(name='glClear', arguments=[Name(value='GLES20.GL_COLOR_BUFFER_BIT')], type_arguments=[], target=Name(value='GLES20')), MethodInvocation(name='setTimeInMillis', arguments=[MethodInvocation(name='currentTimeMillis', arguments=[], type_arguments=[], target=Name(value='System'))], type_arguments=[], target=Name(value='mCalendar')), VariableDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='seconds', dimensions=0), initializer=Additive(operator='+', lhs=MethodInvocation(name='get', arguments=[Name(value='Calendar.SECOND')], type_arguments=[], target=Name(value='mCalendar')), rhs=Multiplicative(operator='/', lhs=MethodInvocation(name='get', arguments=[Name(value='Calendar.MILLISECOND')], type_arguments=[], target=Name(value='mCalendar')), rhs=Literal(value='1000f'))))], modifiers=[]), VariableDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='minutes', dimensions=0), initializer=Additive(operator='+', lhs=MethodInvocation(name='get', arguments=[Name(value='Calendar.MINUTE')], type_arguments=[], target=Name(value='mCalendar')), rhs=Multiplicative(operator='/', lhs=Name(value='seconds'), rhs=Literal(value='60f'))))], modifiers=[]), VariableDeclaration(type='float', variable_declarators=[VariableDeclarator(variable=Variable(name='hours', dimensions=0), initializer=Additive(operator='+', lhs=MethodInvocation(name='get', arguments=[Name(value='Calendar.HOUR')], type_arguments=[], target=Name(value='mCalendar')), rhs=Multiplicative(operator='/', lhs=Name(value='minutes'), rhs=Literal(value='60f'))))], modifiers=[]), VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='secIndex', dimensions=0), initializer=Cast(target=Type(name='int', type_arguments=[], enclosed_in=None, dimensions=0), expression=Multiplicative(operator='*', lhs=Multiplicative(operator='/', lhs=Name(value='seconds'), rhs=Literal(value='60f')), rhs=Literal(value='360f'))))], modifiers=['final']), VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='minIndex', dimensions=0), initializer=Cast(target=Type(name='int', type_arguments=[], enclosed_in=None, dimensions=0), expression=Multiplicative(operator='*', lhs=Multiplicative(operator='/', lhs=Name(value='minutes'), rhs=Literal(value='60f')), rhs=Literal(value='360f'))))], modifiers=['final']), VariableDeclaration(type='int', variable_declarators=[VariableDeclarator(variable=Variable(name='hoursIndex', dimensions=0), initializer=Cast(target=Type(name='int', type_arguments=[], enclosed_in=None, dimensions=0), expression=Multiplicative(operator='*', lhs=Multiplicative(operator='/', lhs=Name(value='hours'), rhs=Literal(value='12f')), rhs=Literal(value='360f'))))], modifiers=['final']), MethodInvocation(name='multiplyMM', arguments=[Name(value='mMvpMatrix'), Literal(value='0'), Name(value='vpMatrix'), Literal(value='0'), ArrayAccess(index=Name(value='hoursIndex'), target=Name(value='mModelMatrices')), Literal(value='0')], type_arguments=[], target=Name(value='Matrix')), MethodInvocation(name='draw', arguments=[Name(value='mMvpMatrix')], type_arguments=[], target=Name(value='mHourHandTriangle')), MethodInvocation(name='multiplyMM', arguments=[Name(value='mMvpMatrix'), Literal(value='0'), Name(value='vpMatrix'), Literal(value='0'), ArrayAccess(index=Name(value='minIndex'), target=Name(value='mModelMatrices')), Literal(value='0')], type_arguments=[], target=Name(value='Matrix')), MethodInvocation(name='draw', arguments=[Name(value='mMvpMatrix')], type_arguments=[], target=Name(value='mMinuteHandTriangle')), IfThenElse(predicate=Unary(sign='!', expression=MethodInvocation(name='isInAmbientMode', arguments=[], type_arguments=[], target=None)), if_true=Block(statements=[MethodInvocation(name='multiplyMM', arguments=[Name(value='mMvpMatrix'), Literal(value='0'), Name(value='vpMatrix'), Literal(value='0'), ArrayAccess(index=Name(value='secIndex'), target=Name(value='mModelMatrices')), Literal(value='0')], type_arguments=[], target=Name(value='Matrix')), MethodInvocation(name='draw', arguments=[Name(value='mMvpMatrix')], type_arguments=[], target=Name(value='mSecondHandTriangle'))]), if_false=None), MethodInvocation(name='draw', arguments=[Name(value='vpMatrix')], type_arguments=[], target=Name(value='mMajorTickTriangles')), MethodInvocation(name='draw', arguments=[Name(value='vpMatrix')], type_arguments=[], target=Name(value='mMinorTickTriangles')), IfThenElse(predicate=ConditionalAnd(operator='&&', lhs=MethodInvocation(name='isVisible', arguments=[], type_arguments=[], target=None), rhs=Unary(sign='!', expression=MethodInvocation(name='isInAmbientMode', arguments=[], type_arguments=[], target=None))), if_true=Block(statements=[MethodInvocation(name='invalidate', arguments=[], type_arguments=[], target=None)]), if_false=None)], abstract=False, extended_dims=0, throws=None)], modifiers=['private'], type_parameters=[], extends=Type(name=Name(value='Gles2WatchFaceService.Engine'), type_arguments=[], enclosed_in=None, dimensions=0), implements=[])WARNING: Token 'LINE_COMMENT' defined, but not used
WARNING: Token 'BLOCK_COMMENT' defined, but not used
WARNING: There are 2 unused tokens
Generating LALR tables

[('FieldDeclaration', 4), ('MethodDeclaration', 1), ('ClassDeclaration', 1)]
----------
---
done
[Finished in 12.4s]